/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTiny.java */
package asint;

public class AnalizadorSintacticoTiny implements AnalizadorSintacticoTinyConstants {

  final public void analiza() throws ParseException {
    trace_call("analiza");
    try {
      programa();
      jj_consume_token(0);
    } finally {
      trace_return("analiza");
    }
  }

  final public void programa() throws ParseException {
    trace_call("programa");
    try {
      bloque();
    } finally {
      trace_return("programa");
    }
  }

  final public void bloque() throws ParseException {
    trace_call("bloque");
    try {
      jj_consume_token(35);
      declaraciones_opt();
      instrucciones_opt();
      jj_consume_token(36);
    } finally {
      trace_return("bloque");
    }
  }

  final public void declaraciones_opt() throws ParseException {
    trace_call("declaraciones_opt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_:
      case real:
      case bool:
      case string:
      case proc:
      case struct:
      case type:
      case identificador:
      case 45:
        declaraciones();
        jj_consume_token(37);
        break;
      default:
        jj_la1[0] = jj_gen;

      }
    } finally {
      trace_return("declaraciones_opt");
    }
  }

  final public void instrucciones_opt() throws ParseException {
    trace_call("instrucciones_opt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case if_:
      case while_:
      case new_:
      case delete:
      case read:
      case write:
      case nl:
      case call:
      case 35:
      case 46:
        instrucciones();
        break;
      default:
        jj_la1[1] = jj_gen;

      }
    } finally {
      trace_return("instrucciones_opt");
    }
  }

  final public void declaraciones() throws ParseException {
    trace_call("declaraciones");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_:
      case real:
      case bool:
      case string:
      case proc:
      case struct:
      case type:
      case identificador:
      case 45:
        declaracion();
        jj_consume_token(38);
        declaraciones();
        break;
        declaracion();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaraciones");
    }
  }

  final public void declaracion() throws ParseException {
    trace_call("declaracion");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
      case 45:
        declaracion_var();
        break;
      case type:
        declaracion_tipo();
        break;
      case proc:
        declaracion_proc();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("declaracion");
    }
  }

  final public void declaracion_var() throws ParseException {
    trace_call("declaracion_var");
    try {
      tipo();
      jj_consume_token(identificador);
    } finally {
      trace_return("declaracion_var");
    }
  }

  final public void declaracion_tipo() throws ParseException {
    trace_call("declaracion_tipo");
    try {
      jj_consume_token(type);
      tipo();
      jj_consume_token(identificador);
    } finally {
      trace_return("declaracion_tipo");
    }
  }

  final public void declaracion_proc() throws ParseException {
    trace_call("declaracion_proc");
    try {
      jj_consume_token(proc);
      jj_consume_token(identificador);
      jj_consume_token(39);
      parametros_formales_opt();
      jj_consume_token(40);
      bloque();
    } finally {
      trace_return("declaracion_proc");
    }
  }

  final public void parametros_formales_opt() throws ParseException {
    trace_call("parametros_formales_opt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case int_:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
      case 45:
        parametros_formales();
        break;
      default:
        jj_la1[4] = jj_gen;

      }
    } finally {
      trace_return("parametros_formales_opt");
    }
  }

  final public void parametros_formales() throws ParseException {
    trace_call("parametros_formales");
    try {
      parametro_formal();
      parametros_formalesP();
    } finally {
      trace_return("parametros_formales");
    }
  }

  final public void parametros_formalesP() throws ParseException {
    trace_call("parametros_formalesP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        parametro_formal();
        parametros_formalesP();
        break;
      default:
        jj_la1[5] = jj_gen;

      }
    } finally {
      trace_return("parametros_formalesP");
    }
  }

  final public void parametro_formal() throws ParseException {
    trace_call("parametro_formal");
    try {
      tipo();
      and_opt();
      jj_consume_token(identificador);
    } finally {
      trace_return("parametro_formal");
    }
  }

  final public void and_opt() throws ParseException {
    trace_call("and_opt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[6] = jj_gen;

      }
    } finally {
      trace_return("and_opt");
    }
  }

  final public void tipo() throws ParseException {
    trace_call("tipo");
    try {
      tipo1();
      tipoP();
    } finally {
      trace_return("tipo");
    }
  }

  final public void tipoP() throws ParseException {
    trace_call("tipoP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        jj_consume_token(literalEntero);
        jj_consume_token(44);
        tipoP();
        break;
      default:
        jj_la1[7] = jj_gen;

      }
    } finally {
      trace_return("tipoP");
    }
  }

  final public void tipo1() throws ParseException {
    trace_call("tipo1");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 45:
        jj_consume_token(45);
        tipo1();
        break;
      case int_:
      case real:
      case bool:
      case string:
      case struct:
      case identificador:
        tipo2();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo1");
    }
  }

  final public void tipo2() throws ParseException {
    trace_call("tipo2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identificador:
        jj_consume_token(identificador);
        break;
      case struct:
        jj_consume_token(struct);
        jj_consume_token(35);
        campos();
        jj_consume_token(36);
        break;
      case int_:
        jj_consume_token(int_);
        break;
      case real:
        jj_consume_token(real);
        break;
      case bool:
        jj_consume_token(bool);
        break;
      case string:
        jj_consume_token(string);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("tipo2");
    }
  }

  final public void campos() throws ParseException {
    trace_call("campos");
    try {
      campo();
      camposP();
    } finally {
      trace_return("campos");
    }
  }

  final public void camposP() throws ParseException {
    trace_call("camposP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        campo();
        camposP();
        break;
      default:
        jj_la1[10] = jj_gen;

      }
    } finally {
      trace_return("camposP");
    }
  }

  final public void campo() throws ParseException {
    trace_call("campo");
    try {
      tipo();
      jj_consume_token(identificador);
    } finally {
      trace_return("campo");
    }
  }

  final public void instrucciones() throws ParseException {
    trace_call("instrucciones");
    try {
      instruccion();
      instruccionesP();
    } finally {
      trace_return("instrucciones");
    }
  }

  final public void instruccionesP() throws ParseException {
    trace_call("instruccionesP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 38:
        jj_consume_token(38);
        instruccion();
        instruccionesP();
        break;
      default:
        jj_la1[11] = jj_gen;

      }
    } finally {
      trace_return("instruccionesP");
    }
  }

  final public void instruccion() throws ParseException {
    trace_call("instruccion");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case if_:
        jj_consume_token(if_);
        E0();
        bloque();
        if_select();
        break;
      case 46:
        jj_consume_token(46);
        E0();
        break;
      case while_:
        jj_consume_token(while_);
        E0();
        bloque();
        break;
      case read:
        jj_consume_token(read);
        E0();
        break;
      case write:
        jj_consume_token(write);
        E0();
        break;
      case nl:
        jj_consume_token(nl);
        break;
      case new_:
        jj_consume_token(new_);
        E0();
        break;
      case delete:
        jj_consume_token(delete);
        E0();
        break;
      case call:
        jj_consume_token(call);
        jj_consume_token(identificador);
        jj_consume_token(39);
        parametros_reales_opt();
        jj_consume_token(40);
        break;
      case 35:
        bloque();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("instruccion");
    }
  }

  final public void if_select() throws ParseException {
    trace_call("if_select");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case else_:
        jj_consume_token(else_);
        bloque();
        break;
      default:
        jj_la1[13] = jj_gen;

      }
    } finally {
      trace_return("if_select");
    }
  }

  final public void parametros_reales_opt() throws ParseException {
    trace_call("parametros_reales_opt");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case null_:
      case true_:
      case false_:
      case not:
      case identificador:
      case literalEntero:
      case literalReal:
      case literalCadena:
      case 39:
      case 48:
        parametros_reales();
        break;
      default:
        jj_la1[14] = jj_gen;

      }
    } finally {
      trace_return("parametros_reales_opt");
    }
  }

  final public void parametros_reales() throws ParseException {
    trace_call("parametros_reales");
    try {
      E0();
      parametros_realesP();
    } finally {
      trace_return("parametros_reales");
    }
  }

  final public void parametros_realesP() throws ParseException {
    trace_call("parametros_realesP");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        E0();
        parametros_realesP();
        break;
      default:
        jj_la1[15] = jj_gen;

      }
    } finally {
      trace_return("parametros_realesP");
    }
  }

  final public void E0() throws ParseException {
    trace_call("E0");
    try {
      E1();
      RE0();
    } finally {
      trace_return("E0");
    }
  }

  final public void RE0() throws ParseException {
    trace_call("RE0");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 47:
        jj_consume_token(47);
        E0();
        break;
      default:
        jj_la1[16] = jj_gen;

      }
    } finally {
      trace_return("RE0");
    }
  }

  final public void E1() throws ParseException {
    trace_call("E1");
    try {
      E2();
      E1P();
    } finally {
      trace_return("E1");
    }
  }

  final public void E1P() throws ParseException {
    trace_call("E1P");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
        op1();
        E2();
        E1P();
        break;
      default:
        jj_la1[17] = jj_gen;

      }
    } finally {
      trace_return("E1P");
    }
  }

  final public void E2() throws ParseException {
    trace_call("E2");
    try {
      E3();
      RE2();
      E2P();
    } finally {
      trace_return("E2");
    }
  }

  final public void RE2() throws ParseException {
    trace_call("RE2");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        jj_consume_token(48);
        E3();
        break;
      default:
        jj_la1[18] = jj_gen;

      }
    } finally {
      trace_return("RE2");
    }
  }

  final public void E2P() throws ParseException {
    trace_call("E2P");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        jj_consume_token(49);
        E3();
        E2P();
        break;
      default:
        jj_la1[19] = jj_gen;

      }
    } finally {
      trace_return("E2P");
    }
  }

  final public void E3() throws ParseException {
    trace_call("E3");
    try {
      E4();
      R3();
    } finally {
      trace_return("E3");
    }
  }

  final public void R3() throws ParseException {
    trace_call("R3");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
      case or:
        op3();
        break;
      default:
        jj_la1[20] = jj_gen;

      }
    } finally {
      trace_return("R3");
    }
  }

  final public void E4() throws ParseException {
    trace_call("E4");
    try {
      E5();
      E4P();
    } finally {
      trace_return("E4");
    }
  }

  final public void E4P() throws ParseException {
    trace_call("E4P");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
      case 57:
      case 58:
        op4();
        E5();
        E4P();
        break;
      default:
        jj_la1[21] = jj_gen;

      }
    } finally {
      trace_return("E4P");
    }
  }

  final public void E5() throws ParseException {
    trace_call("E5");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case 48:
        op5();
        E5();
        break;
      case null_:
      case true_:
      case false_:
      case identificador:
      case literalEntero:
      case literalReal:
      case literalCadena:
      case 39:
        E6();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("E5");
    }
  }

  final public void E6() throws ParseException {
    trace_call("E6");
    try {
      RE6();
      E6P();
    } finally {
      trace_return("E6");
    }
  }

  final public void E6P() throws ParseException {
    trace_call("E6P");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
      case 45:
      case 59:
        op6();
        E6P();
        break;
      default:
        jj_la1[23] = jj_gen;

      }
    } finally {
      trace_return("E6P");
    }
  }

  final public void RE6() throws ParseException {
    trace_call("RE6");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case literalReal:
        jj_consume_token(literalReal);
        break;
      case literalEntero:
        jj_consume_token(literalEntero);
        break;
      case true_:
        jj_consume_token(true_);
        break;
      case false_:
        jj_consume_token(false_);
        break;
      case literalCadena:
        jj_consume_token(literalCadena);
        break;
      case identificador:
        jj_consume_token(identificador);
        break;
      case null_:
        jj_consume_token(null_);
        break;
      case 39:
        jj_consume_token(39);
        E0();
        jj_consume_token(40);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("RE6");
    }
  }

  final public void op1() throws ParseException {
    trace_call("op1");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        break;
      case 51:
        jj_consume_token(51);
        break;
      case 52:
        jj_consume_token(52);
        break;
      case 53:
        jj_consume_token(53);
        break;
      case 54:
        jj_consume_token(54);
        break;
      case 55:
        jj_consume_token(55);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op1");
    }
  }

  final public void op3() throws ParseException {
    trace_call("op3");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        jj_consume_token(and);
        E3();
        break;
      case or:
        jj_consume_token(or);
        E4();
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op3");
    }
  }

  final public void op4() throws ParseException {
    trace_call("op4");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 56:
        jj_consume_token(56);
        break;
      case 57:
        jj_consume_token(57);
        break;
      case 58:
        jj_consume_token(58);
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op4");
    }
  }

  final public void op5() throws ParseException {
    trace_call("op5");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 48:
        jj_consume_token(48);
        break;
      case not:
        jj_consume_token(not);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op5");
    }
  }

  final public void op6() throws ParseException {
    trace_call("op6");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        jj_consume_token(43);
        jj_consume_token(literalEntero);
        jj_consume_token(44);
        break;
      case 59:
        jj_consume_token(59);
        campo();
        break;
      case 45:
        jj_consume_token(45);
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      trace_return("op6");
    }
  }

  /** Generated Token Manager. */
  public AnalizadorSintacticoTinyTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20411780,0xbea000,0x20411780,0x20411780,0x20010780,0x0,0x0,0x0,0x20010780,0x20010780,0x0,0x0,0xbea000,0x4000,0xeb000800,0x0,0x0,0x0,0x0,0x0,0x14000000,0x0,0xeb000800,0x0,0xe3000800,0x0,0x14000000,0x0,0x8000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x2000,0x4008,0x2000,0x2000,0x2000,0x200,0x400,0x800,0x2000,0x0,0x200,0x40,0x4008,0x0,0x10081,0x200,0x8000,0xfc0000,0x10000,0x20000,0x0,0x7000000,0x10081,0x8002800,0x81,0xfc0000,0x0,0x7000000,0x10000,0x8002800,};
   }

  /** Constructor with InputStream. */
  public AnalizadorSintacticoTiny(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorSintacticoTiny(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorSintacticoTiny(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorSintacticoTiny(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorSintacticoTinyTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

                                       }
