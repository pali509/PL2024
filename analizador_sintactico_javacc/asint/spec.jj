options  {
  STATIC=false;
  DEBUG_PARSER=true;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package asint;

public class AnalizadorSintacticoTiny {}
PARSER_END(AnalizadorSintacticoTiny)
  TOKEN:{<#letra:["a"-"z","A"-"Z", "_"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: "." ((<digito>)* <digitoPositivo>)| "0">}
  TOKEN:{<#parteExponencial: ["e","E"] (["+", "-"])? (<digitoPositivo> (<digito>)* | "0") >}
  
  TOKEN: {<int_: ("i"|"I")("n"|"N")("t"|"T") >}
  TOKEN: {<real: ("r"|"R")("e"|"E")("a"|"A")("l"|"L") >}
  TOKEN: {<bool: ("b"|"B")("o"|"O")("o"|"O")("l"|"L") >}
  TOKEN: {<string: ("s"|"S")("t"|"T")("r"|"R")("i"|"I")("n"|"N")("g"|"G") >}
  TOKEN: {<null_: ("n"|"N")("u"|"U")("l"|"L")("l"|"L") >}
  TOKEN: {<proc: ("p"|"P")("r"|"R")("o"|"O")("c"|"C") >}
  TOKEN: {<if_: ("i"|"F")("f"|"F") >}
  TOKEN: {<else_: ("e"|"E")("l"|"L")("s"|"S")("e"|"E") >}
  TOKEN: {<while_: ("w"|"W")("h"|"H")("i"|"I")("l"|"L")("e"|"E") >}
  TOKEN: {<struct: ("s"|"S")("t"|"T")("r"|"R")("u"|"U")("c"|"C")("t"|"T") >}
  TOKEN: {<new_: ("n"|"N")("e"|"E")("w"|"W") >}
  TOKEN: {<delete: ("d"|"D")("e"|"E")("l"|"L")("e"|"E")("t"|"T")("e"|"E") >}
  TOKEN: {<read: ("r"|"R")("e"|"E")("a"|"A")("d"|"D")>}
  TOKEN: {<write: ("w"|"W")("r"|"R")("i"|"I")("t"|"T")("e"|"E") >}
  TOKEN: {<nl: ("n"|"N")("l"|"L") >}
  TOKEN: {<type: ("t"|"T")("y"|"Y")("p"|"P")("e"|"E")>}
  TOKEN: {<call: ("c"|"C")("a"|"A")("l"|"L")("l"|"L")>}
  TOKEN: {<true_: ("t"|"T")("r"|"R")("u"|"U")("e"|"E")>}
  TOKEN: {<false_: ("f"|"F")("a"|"A")("l"|"L")("s"|"S")("e"|"E")>}
  TOKEN: {<and: ("a"|"A")("n"|"N")("d"|"D") >}
  TOKEN: {<not: ("n"|"N")("o"|"O")("t"|"T") >}
  TOKEN: {<or: ("o"|"O")("r"|"R")>}
  TOKEN:{<identificador:<letra>(<letra>|<digito>)*>}
  TOKEN:{<literalEntero:(["+","-"])?<parteEntera>>}
  TOKEN:{<literalReal: (["+","-"])?<parteEntera>(<parteDecimal> | <parteExponencial> | <parteDecimal><parteExponencial>)>}
  TOKEN:{<literalCadena: "\""(~["\""])*"\"">}
  
  SKIP:{<["\t"," ","\r","\b","\n"]>}
  SKIP:{<"##"(~["\n"])*>}  
  
  void analiza()   : {} {programa() }
  void programa()  : {} {bloque() <EOF>}
  void bloque(): {} { "{" declaraciones_opt() instrucciones_opt() "}"}
  void declaraciones_opt(): {} {declaraciones() "&&" | {} }
  void instrucciones_opt(): {} {instrucciones() | {} }
  void declaraciones(): {} { declaracion() declaracion_extra()}
  void declaracion_extra(): {} { ";" declaraciones() | {} }
  void declaracion(): {} {declaracion_var() | declaracion_tipo() | declaracion_proc()}
  void declaracion_var(): {} {tipo() <identificador>}
  void declaracion_tipo(): {} {<type> tipo() <identificador>}
  void declaracion_proc(): {} {<proc> <identificador> "(" parametros_formales_opt() ")" bloque() }
  void parametros_formales_opt(): {} {parametros_formales() | {} }
  void parametros_formales(): {} { parametro_formal() parametros_formalesP()}
  void parametros_formalesP(): {} { "," parametro_formal() parametros_formalesP() | {}}
  void parametro_formal(): { } {tipo() and_opt() <identificador > }
  void and_opt(): {} {"&" | {} }
  void tipo(): { } {tipo1() tipoP()}
  void tipoP(): { } { "[" < literalEntero > "]" tipoP() | {}}
  void tipo1(): { } { "^" tipo1() | tipo2()}
  void tipo2(): { } {<identificador> | <struct>"{" campos() "}"| <int_> | <real> | <bool> | <string>}
  void campos(): { } {campo() camposP()}
  void camposP(): { } {"," campo() camposP() | {} }
  void campo(): { } {tipo() <identificador> }
  void instrucciones(): { } {instruccion() instruccionesP()}
  void instruccionesP(): { } {";" instruccion() instruccionesP() | {} }
  void instruccion(): { } {<if_> E0() bloque() if_select() | "@" E0() | <while_> E0() bloque() | <read> E0() | <write> E0() | <nl> | <new_> E0() | <delete> E0() | <call> <identificador> "(" parametros_reales_opt() ")" | bloque() }
  void if_select(): { } {<else_> bloque() | {} }
  void parametros_reales_opt(): { } { parametros_reales() | {}}
  void parametros_reales(): { } { E0() parametros_realesP()}
  void parametros_realesP(): { } { "," E0() parametros_realesP() | {}}
  void E0(): { } {E1() RE0()}
  void RE0(): { } {"=" E0() | {}}
  void E1(): { } {E2() E1P()}
  void E1P(): { } { op1() E2() E1P() | {} }
  void E2(): { } { E3() RE2() E2P()}
  void RE2(): { } {"-" E3() | {} }
  void E2P(): { } { "+" E3() E2P() | {} }
  void E3(): { } {E4() R3()}
  void R3(): { } { op3() | {} }
  void E4(): { } {E5() E4P()}
  void E4P(): { } { op4() E5() E4P() | {} }
  void E5(): { } { op5() E5() | E6()}
  void E6(): { } { RE6() E6P()}
  void E6P(): { } { op6() E6P() | {} }
  void RE6(): { } {<literalReal> | <literalEntero> | <true_> | <false_> | <literalCadena> | <identificador> | <null_> | "(" E0() ")" }
  void op1(): { } {"<" | ">" | "<=" | ">=" | "==" | "!="}
  void op3(): { } { <and> E3() | <or> E4() }
  void op4(): { } {"*" | "/" | "%" }
  void op5(): { } {"-" | <not> }
  void op6(): { } {"[" <literalEntero> "]" | "." campo() |"^" } 
  
  
