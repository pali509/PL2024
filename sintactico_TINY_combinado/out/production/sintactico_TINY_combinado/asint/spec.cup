package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;

scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica)unidadLexica);
      }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);
:};


terminal     IDENTIFICADOR, LITENTERO,  LITEREAL,  LITCADENA, SUMA, RESTA, MUL, DIV, MOD, MAYOR,
			 MENOR, MAYORIGUAL, MENORIGUAL, IGUAL, DESIGUAL, ASIG, PARA, PARC, PUNTOYCOMA, COMA,
			 CIRCUNFLEJO, PUNTO, CORCHETEA, CORCHETEC, LLAVEA, LLAVEC, ARROBA, AMPERSAND, AMPERSAND2,
			 INT, REAL, BOOL, STRING, NULL, PROC, IF, ELSE, WHILE, STRUCT, NEW, DELETE, READ, WRITE,
			 NL, TYPE, CALL, TRUE, FALSE, AND, NOT, OR;


non terminal  programa, bloque, declaraciones_opt, instrucciones_opt, declaraciones, instrucciones,
			  declaracion, declaracion_var, declaracion_tipo, declaracion_proc, tipo, parametros_formales_opt,
			  parametros_formales, parametro_formal, and_opt,tipo1, tipo2, campos, campo, instruccion, 
			  if_select, E0, parametros_reales_opt, parametros_reales, E1, E2, E3, E4, E5, E6, op1,
			  op4, op5, op6;
              

programa      ::= bloque ;
bloque		  ::= LLAVEA declaraciones_opt instrucciones_opt LLAVEC ;
declaraciones_opt ::= declaraciones AMPERSAND2 ;
declaraciones_opt ::= ;
instrucciones_opt ::= instrucciones ;
instrucciones_opt ::= ;
declaraciones ::= declaraciones PUNTOYCOMA declaracion ;
declaraciones ::= declaracion ;
declaracion ::=  declaracion_var ;
declaracion ::= declaracion_tipo ;
declaracion ::= declaracion_proc ;
declaracion_var ::= tipo IDENTIFICADOR ;
declaracion_tipo ::= TYPE tipo IDENTIFICADOR ;
declaracion_proc  ::= PROC IDENTIFICADOR  PARA parametros_formales_opt PARC bloque ;
parametros_formales_opt ::= parametros_formales ;
parametros_formales_opt ::= ;
parametros_formales ::= parametros_formales COMA parametro_formal ;
parametros_formales ::= parametro_formal ;
parametro_formal ::= tipo and_opt IDENTIFICADOR;
and_opt ::= AMPERSAND ;
and_opt ::= ;
tipo ::= tipo CORCHETEA LITENTERO CORCHETEC  ;
tipo ::= tipo1 ;
tipo1 ::=  CIRCUNFLEJO tipo1 ;
tipo1 ::= tipo2;
tipo2 ::= IDENTIFICADOR ;
tipo2 ::= STRUCT LLAVEA campos LLAVEC ;
tipo2 ::= INT ;
tipo2 ::= REAL ;
tipo2 ::= BOOL ;
tipo2 ::= STRING ;
campos ::= campos COMA campo ;
campos ::= campo ;
campo ::= tipo IDENTIFICADOR ; 
instrucciones ::= instrucciones PUNTOYCOMA instruccion ;
instrucciones ::= instruccion ;
instruccion ::= IF E0 bloque if_select ;
if_select ::= ELSE bloque ; 
if_select ::= ;
instruccion ::= ARROBA E0;
instruccion ::= WHILE E0 bloque ;
instruccion ::= READ E0 ;
instruccion ::= WRITE E0;
instruccion ::= NL ;
instruccion ::= NEW E0 ;
instruccion ::= DELETE E0 ;
instruccion ::= CALL IDENTIFICADOR PARA parametros_reales_opt PARC ;
instruccion ::= bloque ;
parametros_reales_opt ::= parametros_reales ;
parametros_reales_opt ::= ;
parametros_reales ::= parametros_reales COMA E0 ;
parametros_reales ::= E0 ;
E0 ::= E1 ASIG E0;
E0 ::= E1 ;
E1 ::= E1 op1 E2 ;
E1 ::= E2 ;
E2 ::= E2 SUMA E3 ;
E2 ::= E3 RESTA E3 ;
E2 ::= E3 ;
E3 ::= E4 AND E3 ;
E3 ::= E4 OR E4 ;
E3 ::= E4;
E4 ::= E4 op4 E5 ;
E4 ::= E5 ;
E5 ::= op5 E5 ;
E5 ::= E6;
E6 ::= E6 op6 ;
E6 ::= LITENTERO;
E6 ::= LITEREAL ;
E6 ::= LITCADENA;
E6 ::= TRUE ;
E6 ::= FALSE ;
E6 ::= IDENTIFICADOR ;
E6 ::= NULL ;
E6 ::= PARA E0 PARC ;
op1 ::= MAYOR ;
op1 ::= MENOR ;
op1 ::= MAYORIGUAL ;
op1 ::= MENORIGUAL ;
op1 ::= IGUAL ;
op1 ::= DESIGUAL ;
op4 ::= MUL ;
op4 ::= DIV ;
op4 ::= MOD ;
op5 ::= RESTA ;
op5 ::= NOT ;
op6 ::= CORCHETEA E0 CORCHETEC ;
op6 ::= PUNTO IDENTIFICADOR ;
op6 ::= CIRCUNFLEJO ;


