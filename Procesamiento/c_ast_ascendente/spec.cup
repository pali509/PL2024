package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;


scan with {: 
  return getScanner().next_token(); 
:};
parser code {: 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }
:};
init with {: 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.GestionErroresTiny(errores);
:};
action code {:
  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();
:}


terminal     SUMA, RESTA, MUL, DIV, MOD, MAYOR,
			 MENOR, MAYORIGUAL, MENORIGUAL, IGUAL, DESIGUAL, ASIG, PARA, PARC, PUNTOYCOMA, COMA,
			 CIRCUNFLEJO, PUNTO, CORCHETEA, CORCHETEC, LLAVEA, LLAVEC, ARROBA, AMPERSAND, AMPERSAND2,
			 INT, REAL, BOOL, STRING, NULL, PROC, IF, ELSE, WHILE, STRUCT, NEW, DELETE, READ, WRITE,
			 NL, TYPE, CALL, TRUE, FALSE, AND, NOT, OR;
			 
terminal StringLocalizado IDENTIFICADOR, LITENTERO, LITREAL, LITCADENA;

non terminal  Prog programa;
non terminal  Bloque bloque;
non terminal  LDecsOpt declaraciones_opt;
non terminal  LDecs declaraciones;
non terminal  LInsOpt instrucciones_opt;
non terminal  LIns instrucciones;
non terminal  Dec declaracion;
non terminal  Tipo tipo, tipo1, tipo2;
non terminal  LPForm parametros_formales;
non terminal  PFormOpt parametros_formales_opt; 
non terminal  PFref parametro_formal_ref;
non terminal  PFnoref parametro_formal; 
non terminal  LCamp campos;
non terminal  Camp campo;
non terminal  Ins instruccion;
non terminal  Exp E0, E1, E2, E3, E4, E5, E6, E7;
non terminal  LPRealOpt parametros_reales_opt;
non terminal  LPReal parametros_reales;
non terminal  String op1, op4, op5, and_opt;

programa ::= bloque: bloq
	{: RESULT = sem.prog(bloq);:};

bloque		::= LLAVEA declaraciones_opt: decs_opt instrucciones_opt: ins_opt LLAVEC
   {: RESULT = sem.bloque(decs_opt, ins_opt); :};
   
declaraciones_opt ::= declaraciones: decs AMPERSAND2 
	{: RESULT = sem.si_decs(decs); :};
	
declaraciones_opt ::= 
	{: RESULT = sem.no_decs(); :};

instrucciones_opt ::= instrucciones: ins
	{: RESULT = sem.si_ins(ins); :};
	
instrucciones_opt ::= 
	{: RESULT = sem.no_ins(); :};   

declaraciones ::= declaraciones: decs PUNTOYCOMA declaracion: dec
 	{: RESULT = sem.muchas_decs(decs, dec); :};

declaraciones ::= declaracion: dec 
	{: RESULT = sem.una_dec(dec); :};

declaracion ::= tipo: t IDENTIFICADOR: id
	{: RESULT = (Dec)sem.dec_var(id.str(),t).ponFila(id.fila()).ponCol(id.col()); :}; 
 
declaracion ::= TYPE tipo: t IDENTIFICADOR: id 
	{: RESULT = (Dec)sem.dec_tipo(id.str(), t).ponFila(id.fila()).ponCol(id.col()); :}; 
	
declaracion ::= PROC IDENTIFICADOR: id  PARA parametros_formales_opt: parFopt PARC bloque: bloq
	{: RESULT = (Dec)sem.dec_proc(id.str(), parFopt, bloq).ponFila(id.fila()).ponCol(id.col()); :}; 

parametros_formales_opt ::= parametros_formales: parFs
	{: RESULT = sem.si_pforms(parFs); :};
	
parametros_formales_opt ::= 
	{: RESULT = sem.no_pforms(); :};

parametros_formales ::= parametros_formales:parFs COMA parametro_formal: parF 
	{: RESULT = sem.muchos_pforms(parFs, parF); :};
	
parametros_formales ::= parametro_formal: parF
	{: RESULT = sem.un_pform(parF); :};
	
parametro_formal_ref ::= tipo: t AMPERSAND IDENTIFICADOR: id
	{: RESULT = (PFref)sem.pfref(t, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
	
parametro_formal ::= tipo: t  IDENTIFICADOR: id
	{: RESULT = (PFref)sem.pfnoref(t, id.str()).ponFila(id.fila()).ponCol(id.col()); :};


tipo ::= tipo: t CORCHETEA LITENTERO: num CORCHETEC  
	{: RESULT = (Tipo)sem.array(t, num.str()).ponFila(num.fila()).ponCol(num.col()); :};
	
tipo ::= tipo1: t 
	{: RESULT = t; :};
	
tipo1 ::=  CIRCUNFLEJO tipo1: t
	{: RESULT = (Tipo)sem.puntero(t); :};

tipo1 ::= tipo2: t
	{: RESULT = t; :};
	
tipo2 ::= IDENTIFICADOR: id 
	{: RESULT = (Tipo)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :}; 

tipo2 ::= STRUCT LLAVEA campos:camps LLAVEC 
	{: RESULT = (Tipo)sem.struct(camps); :}; 

tipo2 ::= INT
	{: RESULT = sem.lit_ent(); :}; 

tipo2 ::= REAL 
	{: RESULT = sem.lit_real(); :}; 

tipo2 ::= BOOL
	{: RESULT = sem.lit_bool(); :}; 

tipo2 ::= STRING 
	{: RESULT = sem.lit_string(); :}; 

campos ::= campos: camps COMA campo: camp
	{: RESULT = sem.muchos_camp(camps, camp); :};

campos ::= campo: camp
	{: RESULT = sem.un_camp(camp); :};

campo ::= tipo: t IDENTIFICADOR: id 
	{: RESULT = (Camp)sem.camp(t, id.str()).ponFila(id.fila()).ponCol(id.col()); :};
 
instrucciones ::= instrucciones: ins PUNTOYCOMA instruccion: in 
	{: RESULT = sem.muchas_ins(ins,in); :};

instrucciones ::= instruccion: in
	{: RESULT = sem.una_ins(in); :};

instruccion ::= ARROBA E0: exp
	{: RESULT = sem.ins_asig(exp); :};


instruccion ::= IF E0: exp bloque: bloq 
	{: RESULT = (Ins)sem.ins_if(exp, bloq); :};


instruccion ::= IF E0: exp bloque: bloq  ELSE bloque: bloq1
	{: RESULT = (Ins)sem.ins_if_else(exp, bloq, bloq1); :};

instruccion ::= WHILE E0: exp bloque: bloq
	{: RESULT = (Ins)sem.ins_while(exp, bloq); :};

instruccion ::= READ E0:exp
	{: RESULT = (Ins)sem.ins_read(exp); :};

instruccion ::= WRITE E0:exp
	{: RESULT = (Ins)sem.ins_write(exp); :};

instruccion ::= NL
	{: RESULT = (Ins)sem.ins_nl(); :};

instruccion ::= NEW E0: exp
	{: RESULT = (Ins)sem.ins_new(exp); :};

instruccion ::= DELETE E0:exp
	{: RESULT = (Ins)sem.ins_delete(exp); :};

instruccion ::= CALL IDENTIFICADOR:id PARA parametros_reales_opt:parRopt PARC
	{: RESULT = (Ins)sem.ins_call(id.str(), parRopt).ponFila(id.fila()).ponCol(id.col()); :};

instruccion ::= bloque:bloq 
	{: RESULT = (Ins)sem.ins_bloque(bloq); :};

parametros_reales_opt ::= parametros_reales: parR
	{: RESULT = sem.si_preal(parR); :};
	
parametros_reales_opt ::= 
	{: RESULT = sem.no_preal(); :};

parametros_reales ::= parametros_reales: pReals COMA E0: exp 
	{: RESULT = sem.muchos_preal(pReals, exp); :};

parametros_reales ::= E0:exp
	{: RESULT = sem.un_preal(exp); :};

E0 ::= E1:op1 ASIG E0:op2
	{: RESULT = sem.asig(op1,op2); :};

E0 ::= E1: exp
	{: RESULT = exp; :};

E1 ::= E1:opn1 op1:op E2:opn2
	{: RESULT = sem.mkop2(op, opn1,opn2); :};

E1 ::= E2:exp 
	{: RESULT = exp; :};

E2 ::= E2:opn1 SUMA E3:opn2
	{: RESULT = sem.mkop2("+", opn1,opn2); :};

E2 ::= E3:opn1 RESTA E3:opn2
	{: RESULT = sem.mkop2("-", opn1,opn2); :};

E2 ::= E3:exp
	{: RESULT = exp; :};

E3 ::= E4:opn1 AND E3:opn2
	{: RESULT = sem.and(opn1,opn2); :};

E3 ::= E4:opn1 OR E4:opn2
	{: RESULT = sem.or(opn1,opn2); :};

E3 ::= E4:exp
	{: RESULT = exp; :};

E4 ::= E4:opn1 op4:op E5:opn2
	{: RESULT = sem.mkop2(op, opn1,opn2); :};

E4 ::= E5:exp
	{: RESULT = exp; :};

E5 ::= op5:op E5:opn1
	{: RESULT = sem.mkop1(op, opn1); :};

E5 ::= E6:exp
	{: RESULT = exp; :};

E6 ::= E6:opn1 CORCHETEA E0:exp CORCHETEC
	{: RESULT = (Exp)sem.accesoArray(opn1,exp); :};

E6 ::= E6:exp PUNTO IDENTIFICADOR:id
	{: RESULT = (Exp)sem.accesoCampo(id.str(), exp).ponFila(id.fila()).ponCol(id.col()); :};

E6 ::= E6:exp CIRCUNFLEJO
	{: RESULT = (Exp)sem.accesoPuntero(exp); :};

E6 ::= E7:exp
	{: RESULT = exp; :};

E7 ::= LITENTERO:num
	{: RESULT = (Exp)sem.exp_lit_ent(num.str()).ponFila(num.fila()).ponCol(num.col()); :};

E7 ::= LITREAL:num
	{: RESULT = (Exp)sem.exp_lit_real(num.str()).ponFila(num.fila()).ponCol(num.col()); :};

E7 ::= LITCADENA:num
	{: RESULT = (Exp)sem.exp_lit_cadena(num.str()).ponFila(num.fila()).ponCol(num.col()); :};

E7 ::= TRUE
	{: RESULT = (Exp)sem.exp_lit_BoolTrue(); :};

E7 ::= FALSE
	{: RESULT = (Exp)sem.exp_lit_BoolFalse(); :};

E7 ::= IDENTIFICADOR:id
	{: RESULT = (Exp)sem.exp_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); :};

E7 ::= NULL
	{: RESULT = (Exp)sem.exp_null(); :};

E7 ::= PARA E0:exp PARC
	{: RESULT = exp; :};

op1 ::= MAYOR
   {: RESULT = ">"; :};

op1 ::= MENOR
   {: RESULT = "<"; :};

op1 ::= MAYORIGUAL
   {: RESULT = ">="; :};

op1 ::= MENORIGUAL
   {: RESULT = "<="; :};

op1 ::= IGUAL
   {: RESULT = "=="; :};

op1 ::= DESIGUAL
   {: RESULT = "!="; :};

op4 ::= MUL
   {: RESULT = "*"; :};

op4 ::= DIV
   {: RESULT = "/"; :};

op4 ::= MOD
   {: RESULT = "%"; :};

op5 ::= RESTA
   {: RESULT = "-"; :};

op5 ::= NOT
   {: RESULT = "not"; :};




