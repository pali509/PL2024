
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Apr 12 19:09:23 CEST 2024
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import asint.ClaseSemanticaTiny;
import asint.SintaxisAbstractaTiny.*;
import c_ast_ascendente.UnidadLexica.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Apr 12 19:09:23 CEST 2024
  */
public class ConstructorASTTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorASTTiny() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorASTTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\006\003" +
    "\000\002\006\002\000\002\005\005\000\002\005\003\000" +
    "\002\010\004\000\002\010\005\000\002\010\010\000\002" +
    "\015\003\000\002\015\002\000\002\014\005\000\002\014" +
    "\003\000\002\016\005\000\002\017\004\000\002\011\006" +
    "\000\002\011\003\000\002\012\004\000\002\012\003\000" +
    "\002\013\003\000\002\013\006\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\020" +
    "\005\000\002\020\003\000\002\021\004\000\002\007\005" +
    "\000\002\007\003\000\002\022\004\000\002\022\005\000" +
    "\002\022\007\000\002\022\005\000\002\022\004\000\002" +
    "\022\004\000\002\022\003\000\002\022\004\000\002\022" +
    "\004\000\002\022\007\000\002\022\003\000\002\033\003" +
    "\000\002\033\002\000\002\034\005\000\002\034\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\003\000\002\030\004\000" +
    "\002\030\003\000\002\031\006\000\002\031\005\000\002" +
    "\031\004\000\002\031\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\005\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\037\003" +
    "\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\004\030\005\001\002\000\004\002\210\001" +
    "\002\000\052\024\022\030\ufffd\031\ufffd\032\ufffd\035\007" +
    "\036\021\037\012\040\015\042\016\043\ufffd\045\ufffd\046" +
    "\013\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\017" +
    "\055\ufffd\063\024\001\002\000\004\002\001\001\002\000" +
    "\006\026\uffe9\063\uffe9\001\002\000\006\026\uffec\063\uffec" +
    "\001\002\000\006\026\uffee\063\uffee\001\002\000\006\026" +
    "\uffe7\063\uffe7\001\002\000\004\030\200\001\002\000\006" +
    "\022\175\034\176\001\002\000\006\026\uffe6\063\uffe6\001" +
    "\002\000\004\063\162\001\002\000\020\024\022\035\007" +
    "\036\021\037\012\040\015\046\013\063\024\001\002\000" +
    "\006\022\ufff9\034\ufff9\001\002\000\006\026\uffe8\063\uffe8" +
    "\001\002\000\020\024\022\035\007\036\021\037\012\040" +
    "\015\046\013\063\024\001\002\000\006\026\154\063\153" +
    "\001\002\000\006\026\uffeb\063\uffeb\001\002\000\030\030" +
    "\005\031\ufffb\032\040\043\036\045\027\047\030\050\037" +
    "\051\026\052\041\053\035\055\042\001\002\000\026\005" +
    "\071\020\055\041\067\056\051\057\064\061\047\063\066" +
    "\064\070\065\045\066\046\001\002\000\026\005\071\020" +
    "\055\041\067\056\051\057\064\061\047\063\066\064\070" +
    "\065\045\066\046\001\002\000\026\005\071\020\055\041" +
    "\067\056\051\057\064\061\047\063\066\064\070\065\045" +
    "\066\046\001\002\000\006\022\uffd6\031\uffd6\001\002\000" +
    "\004\031\146\001\002\000\006\022\144\031\ufffc\001\002" +
    "\000\006\022\uffe1\031\uffe1\001\002\000\006\022\uffda\031" +
    "\uffda\001\002\000\026\005\071\020\055\041\067\056\051" +
    "\057\064\061\047\063\066\064\070\065\045\066\046\001" +
    "\002\000\026\005\071\020\055\041\067\056\051\057\064" +
    "\061\047\063\066\064\070\065\045\066\046\001\002\000" +
    "\026\005\071\020\055\041\067\056\051\057\064\061\047" +
    "\063\066\064\070\065\045\066\046\001\002\000\026\005" +
    "\071\020\055\041\067\056\051\057\064\061\047\063\066" +
    "\064\070\065\045\066\046\001\002\000\004\063\043\001" +
    "\002\000\004\020\044\001\002\000\030\005\071\020\055" +
    "\021\uffd4\041\067\056\051\057\064\061\047\063\066\064" +
    "\070\065\045\066\046\001\002\000\060\004\uffbe\005\uffbe" +
    "\006\uffbe\007\uffbe\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\060" +
    "\uffbe\062\uffbe\001\002\000\060\004\uffbd\005\uffbd\006\uffbd" +
    "\007\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\060\uffbd\062" +
    "\uffbd\001\002\000\026\005\uffad\020\uffad\041\uffad\056\uffad" +
    "\057\uffad\061\uffad\063\uffad\064\uffad\065\uffad\066\uffad\001" +
    "\002\000\060\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\060\uffc0\062\uffc0\001\002\000" +
    "\060\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\060\uffbc\062\uffbc\001\002\000\060\004" +
    "\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\130\025\127\026\131\027\uffc4\030\uffc4" +
    "\031\uffc4\060\uffc4\062\uffc4\001\002\000\052\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\060\uffc6\062\uffc6\001\002" +
    "\000\052\004\uffc8\005\uffc8\006\121\007\122\010\116\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\027\uffc8\030\uffc8\031\uffc8\060" +
    "\120\062\123\001\002\000\026\005\071\020\055\041\067" +
    "\056\051\057\064\061\047\063\066\064\070\065\045\066" +
    "\046\001\002\000\026\005\071\020\055\041\067\056\051" +
    "\057\064\061\047\063\066\064\070\065\045\066\046\001" +
    "\002\000\040\004\uffcb\005\111\011\uffcb\012\uffcb\013\uffcb" +
    "\014\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\023" +
    "\uffcb\027\uffcb\030\uffcb\031\uffcb\001\002\000\036\004\107" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\021\uffce\022\uffce\023\uffce\027\uffce\030\uffce\031\uffce" +
    "\001\002\000\034\011\103\012\102\013\075\014\076\015" +
    "\100\016\077\017\104\021\uffd0\022\uffd0\023\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\001\002\000\006\021\uffd2\023\uffd2\001" +
    "\002\000\004\021\074\001\002\000\060\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\060" +
    "\uffbb\062\uffbb\001\002\000\006\021\uffd5\023\072\001\002" +
    "\000\060\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027" +
    "\uffba\030\uffba\031\uffba\060\uffba\062\uffba\001\002\000\060" +
    "\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\060\uffb9\062\uffb9\001\002\000\060\004\uffbf" +
    "\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\060\uffbf\062\uffbf\001\002\000\026\005\uffae\020\uffae" +
    "\041\uffae\056\uffae\057\uffae\061\uffae\063\uffae\064\uffae\065" +
    "\uffae\066\uffae\001\002\000\026\005\071\020\055\041\067" +
    "\056\051\057\064\061\047\063\066\064\070\065\045\066" +
    "\046\001\002\000\006\021\uffd3\023\uffd3\001\002\000\006" +
    "\022\uffd7\031\uffd7\001\002\000\026\005\uffb5\020\uffb5\041" +
    "\uffb5\056\uffb5\057\uffb5\061\uffb5\063\uffb5\064\uffb5\065\uffb5" +
    "\066\uffb5\001\002\000\026\005\uffb4\020\uffb4\041\uffb4\056" +
    "\uffb4\057\uffb4\061\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4" +
    "\001\002\000\026\005\uffb2\020\uffb2\041\uffb2\056\uffb2\057" +
    "\uffb2\061\uffb2\063\uffb2\064\uffb2\065\uffb2\066\uffb2\001\002" +
    "\000\026\005\uffb3\020\uffb3\041\uffb3\056\uffb3\057\uffb3\061" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\001\002\000\026" +
    "\005\071\020\055\041\067\056\051\057\064\061\047\063" +
    "\066\064\070\065\045\066\046\001\002\000\026\005\uffb6" +
    "\020\uffb6\041\uffb6\056\uffb6\057\uffb6\061\uffb6\063\uffb6\064" +
    "\uffb6\065\uffb6\066\uffb6\001\002\000\026\005\uffb7\020\uffb7" +
    "\041\uffb7\056\uffb7\057\uffb7\061\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\001\002\000\026\005\071\020\055\041\067" +
    "\056\051\057\064\061\047\063\066\064\070\065\045\066" +
    "\046\001\002\000\016\021\uffd1\022\uffd1\023\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\001\002\000\036\004\107\011\uffcf\012" +
    "\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\027\uffcf\030\uffcf\031\uffcf\001\002\000" +
    "\026\005\071\020\055\041\067\056\051\057\064\061\047" +
    "\063\066\064\070\065\045\066\046\001\002\000\036\004" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\021\uffcd\022\uffcd\023\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\001\002\000\026\005\071\020\055\041\067\056\051" +
    "\057\064\061\047\063\066\064\070\065\045\066\046\001" +
    "\002\000\036\004\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\021\uffcc\022\uffcc\023\uffcc\027" +
    "\uffcc\030\uffcc\031\uffcc\001\002\000\052\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\060\uffc5\062\uffc5\001\002\000" +
    "\004\021\115\001\002\000\060\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\010\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\060\uffb8\062" +
    "\uffb8\001\002\000\026\005\uffaf\020\uffaf\041\uffaf\056\uffaf" +
    "\057\uffaf\061\uffaf\063\uffaf\064\uffaf\065\uffaf\066\uffaf\001" +
    "\002\000\026\005\071\020\055\041\067\056\051\057\064" +
    "\061\047\063\066\064\070\065\045\066\046\001\002\000" +
    "\026\005\071\020\055\041\067\056\051\057\064\061\047" +
    "\063\066\064\070\065\045\066\046\001\002\000\026\005" +
    "\uffb1\020\uffb1\041\uffb1\056\uffb1\057\uffb1\061\uffb1\063\uffb1" +
    "\064\uffb1\065\uffb1\066\uffb1\001\002\000\026\005\uffb0\020" +
    "\uffb0\041\uffb0\056\uffb0\057\uffb0\061\uffb0\063\uffb0\064\uffb0" +
    "\065\uffb0\066\uffb0\001\002\000\026\005\071\020\055\041" +
    "\067\056\051\057\064\061\047\063\066\064\070\065\045" +
    "\066\046\001\002\000\046\004\uffc9\005\uffc9\006\121\007" +
    "\122\010\116\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\021\uffc9\022\uffc9\023\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\001\002\000\040\004\uffca\005\uffca\011\uffca" +
    "\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca\021" +
    "\uffca\022\uffca\023\uffca\027\uffca\030\uffca\031\uffca\001\002" +
    "\000\052\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\021\uffc7\022\uffc7\023\uffc7\027\uffc7\030\uffc7\031\uffc7\060" +
    "\uffc7\062\uffc7\001\002\000\004\063\134\001\002\000\060" +
    "\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\060\uffc1\062\uffc1\001\002\000\026\005\071" +
    "\020\055\041\067\056\051\057\064\061\047\063\066\064" +
    "\070\065\045\066\046\001\002\000\004\027\133\001\002" +
    "\000\060\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\060\uffc3\062\uffc3\001\002\000\060" +
    "\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\060\uffc2\062\uffc2\001\002\000\006\022\uffdb" +
    "\031\uffdb\001\002\000\006\022\uffe0\031\uffe0\001\002\000" +
    "\006\022\uffd8\031\uffd8\001\002\000\004\030\005\001\002" +
    "\000\010\022\uffdf\031\uffdf\044\142\001\002\000\004\030" +
    "\005\001\002\000\006\022\uffde\031\uffde\001\002\000\026" +
    "\030\005\032\040\043\036\045\027\047\030\050\037\051" +
    "\026\052\041\053\035\055\042\001\002\000\006\022\uffe2" +
    "\031\uffe2\001\002\000\014\002\uffff\022\uffff\031\uffff\034" +
    "\uffff\044\uffff\001\002\000\006\022\uffd9\031\uffd9\001\002" +
    "\000\004\030\005\001\002\000\006\022\uffdd\031\uffdd\001" +
    "\002\000\006\022\uffdc\031\uffdc\001\002\000\006\022\ufff8" +
    "\034\ufff8\001\002\000\004\064\155\001\002\000\004\027" +
    "\156\001\002\000\006\026\uffef\063\uffef\001\002\000\006" +
    "\026\uffed\063\uffed\001\002\000\006\026\154\063\161\001" +
    "\002\000\006\022\ufff7\034\ufff7\001\002\000\004\020\163" +
    "\001\002\000\022\021\ufff4\024\022\035\007\036\021\037" +
    "\012\040\015\046\013\063\024\001\002\000\006\021\ufff2" +
    "\023\ufff2\001\002\000\006\021\ufff5\023\173\001\002\000" +
    "\006\026\154\063\172\001\002\000\004\021\170\001\002" +
    "\000\004\030\005\001\002\000\006\022\ufff6\034\ufff6\001" +
    "\002\000\006\021\ufff0\023\ufff0\001\002\000\020\024\022" +
    "\035\007\036\021\037\012\040\015\046\013\063\024\001" +
    "\002\000\006\021\ufff3\023\ufff3\001\002\000\024\024\022" +
    "\035\007\036\021\037\012\040\015\042\016\046\013\054" +
    "\017\063\024\001\002\000\030\030\ufffe\031\ufffe\032\ufffe" +
    "\043\ufffe\045\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\055\ufffe\001\002\000\006\022\ufffa\034\ufffa\001\002" +
    "\000\020\024\022\035\007\036\021\037\012\040\015\046" +
    "\013\063\024\001\002\000\006\023\205\031\206\001\002" +
    "\000\006\026\154\063\204\001\002\000\006\023\uffe4\031" +
    "\uffe4\001\002\000\006\023\uffe3\031\uffe3\001\002\000\020" +
    "\024\022\035\007\036\021\037\012\040\015\046\013\063" +
    "\024\001\002\000\006\026\uffea\063\uffea\001\002\000\006" +
    "\023\uffe5\031\uffe5\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\206\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\016\004\024\005\013\010\017\011\022\012\010" +
    "\013\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\157\012\010\013\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\156\013\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\030" +
    "\006\031\007\032\022\033\001\001\000\024\023\151\024" +
    "\060\025\057\026\056\027\053\030\052\031\051\032\047" +
    "\037\055\001\001\000\024\023\147\024\060\025\057\026" +
    "\056\027\053\030\052\031\051\032\047\037\055\001\001" +
    "\000\024\023\146\024\060\025\057\026\056\027\053\030" +
    "\052\031\051\032\047\037\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\023\137\024\060\025\057\026\056" +
    "\027\053\030\052\031\051\032\047\037\055\001\001\000" +
    "\024\023\136\024\060\025\057\026\056\027\053\030\052" +
    "\031\051\032\047\037\055\001\001\000\024\023\135\024" +
    "\060\025\057\026\056\027\053\030\052\031\051\032\047" +
    "\037\055\001\001\000\024\023\134\024\060\025\057\026" +
    "\056\027\053\030\052\031\051\032\047\037\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\023\061\024" +
    "\060\025\057\026\056\027\053\030\052\031\051\032\047" +
    "\033\062\034\064\037\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\116\001\001\000\024\023\113\024\060\025\057\026\056" +
    "\027\053\030\052\031\051\032\047\037\055\001\001\000" +
    "\012\030\112\031\051\032\047\037\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\023\072\024\060\025\057" +
    "\026\056\027\053\030\052\031\051\032\047\037\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\025\105\026\056\027\053\030\052\031\051\032\047" +
    "\037\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\023\104\024\060\025\057\026\056\027\053\030\052" +
    "\031\051\032\047\037\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\026\107\027\053\030\052\031\051" +
    "\032\047\037\055\001\001\000\002\001\001\000\016\026" +
    "\111\027\053\030\052\031\051\032\047\037\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\125\031\051" +
    "\032\047\037\055\001\001\000\016\026\124\027\053\030" +
    "\052\031\051\032\047\037\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\027\123\030\052\031\051\032" +
    "\047\037\055\001\001\000\004\036\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\023\131\024\060\025\057\026\056\027\053" +
    "\030\052\031\051\032\047\037\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\140\001" +
    "\001\000\002\001\001\000\004\003\142\001\001\000\002" +
    "\001\001\000\006\003\030\022\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\011\165\012\010\013\007\014\164" +
    "\015\166\017\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\170" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\011" +
    "\165\012\010\013\007\017\173\001\001\000\002\001\001" +
    "\000\012\010\176\011\022\012\010\013\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\011\201\012\010" +
    "\013\007\020\200\021\202\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\011\201\012\010\013\007\021\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorASTTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorASTTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorASTTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorASTTiny$actions {


  ClaseSemanticaTiny sem = new ClaseSemanticaTiny();

  private final ConstructorASTTiny parser;

  /** Constructor */
  CUP$ConstructorASTTiny$actions(ConstructorASTTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action_part00000000(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorASTTiny$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorASTTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Prog RESULT =null;
		 RESULT = sem.prog(bloque);
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorASTTiny$parser.done_parsing();
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVEA declaraciones_opt instrucciones_opt LLAVEC 
            {
              Bloque RESULT =null;
		LDecsOpt decs_opt = (LDecsOpt)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		LInsOpt ins_opt = (LInsOpt)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.bloque(decs_opt, ins_opt); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones_opt ::= declaraciones AMPERSAND2 
            {
              LDecsOpt RESULT =null;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.si_decs(decs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_opt ::= 
            {
              LDecsOpt RESULT =null;
		 RESULT = sem.no_decs(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones_opt ::= instrucciones 
            {
              LInsOpt RESULT =null;
		LIns ins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_ins(ins); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones_opt ::= 
            {
              LInsOpt RESULT =null;
		 RESULT = sem.no_ins(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",4, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaraciones PUNTOYCOMA declaracion 
            {
              LDecs RESULT =null;
		LDecs decs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_decs(decs, dec); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= declaracion 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_dec(dec); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",3, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= tipo IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_var(id.str(),t).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= TYPE tipo IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_tipo(id.str(), t).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= PROC IDENTIFICADOR PARA parametros_formales_opt PARC bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-4)).value;
		PFormOpt parFopt = (PFormOpt)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Dec)sem.dec_proc(id.str(), parFopt, bloq).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parametros_formales_opt ::= parametros_formales 
            {
              PFormOpt RESULT =null;
		LPForm parFs = (LPForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_pforms(parFs); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales_opt",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parametros_formales_opt ::= 
            {
              PFormOpt RESULT =null;
		 RESULT = sem.no_pforms(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales_opt",11, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_formales ::= parametros_formales COMA parametro_formal 
            {
              LPForm RESULT =null;
		LPForm parFs = (LPForm)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		PFnoref parF = (PFnoref)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_pforms(parFs, parF); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_formales ::= parametro_formal 
            {
              LPForm RESULT =null;
		PFnoref parF = (PFnoref)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_pform(parF); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales",10, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametro_formal_ref ::= tipo AMPERSAND IDENTIFICADOR 
            {
              PFref RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (PFref)sem.pfref(t, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametro_formal_ref",12, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametro_formal ::= tipo IDENTIFICADOR 
            {
              PFnoref RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (PFref)sem.pfnoref(t, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametro_formal",13, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo ::= tipo CORCHETEA LITENTERO CORCHETEC 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Tipo)sem.array(t, num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipo ::= tipo1 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo",7, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo1 ::= CIRCUNFLEJO tipo1 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Tipo)sem.puntero(t); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo1",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo1 ::= tipo2 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = t; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo1",8, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo2 ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Tipo)sem.iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo2 ::= STRUCT LLAVEA campos LLAVEC 
            {
              Tipo RESULT =null;
		LCamp camps = (LCamp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Tipo)sem.struct(camps); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo2 ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.lit_ent(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo2 ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.lit_real(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo2 ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.lit_bool(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo2 ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.lit_string(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("tipo2",9, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // campos ::= campos COMA campo 
            {
              LCamp RESULT =null;
		LCamp camps = (LCamp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Camp camp = (Camp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_camp(camps, camp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campos",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // campos ::= campo 
            {
              LCamp RESULT =null;
		Camp camp = (Camp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_camp(camp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campos",14, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // campo ::= tipo IDENTIFICADOR 
            {
              Camp RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.camp(t, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("campo",15, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instrucciones ::= instrucciones PUNTOYCOMA instruccion 
            {
              LIns RESULT =null;
		LIns ins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Ins in = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchas_ins(ins,in); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instrucciones ::= instruccion 
            {
              LIns RESULT =null;
		Ins in = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.una_ins(in); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",5, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instruccion ::= ARROBA E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_asig(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // instruccion ::= IF E0 bloque 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_if(exp, bloq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instruccion ::= IF E0 bloque ELSE bloque 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Bloque bloq1 = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_if_else(exp, bloq, bloq1); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccion ::= WHILE E0 bloque 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_while(exp, bloq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= READ E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_read(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccion ::= WRITE E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_write(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccion ::= NL 
            {
              Ins RESULT =null;
		 RESULT = sem.ins_nl(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= NEW E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_new(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= DELETE E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_delete(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= CALL IDENTIFICADOR PARA parametros_reales_opt PARC 
            {
              Ins RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		LPRealOpt parRopt = (LPRealOpt)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = sem.ins_call(id.str(), parRopt).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= bloque 
            {
              Ins RESULT =null;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.ins_bloque(bloq); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("instruccion",16, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros_reales_opt ::= parametros_reales 
            {
              LPRealOpt RESULT =null;
		LPReal parR = (LPReal)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.si_preal(parR); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales_opt",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros_reales_opt ::= 
            {
              LPRealOpt RESULT =null;
		 RESULT = sem.no_preal(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales_opt",25, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros_reales ::= parametros_reales COMA E0 
            {
              LPReal RESULT =null;
		LPReal pReals = (LPReal)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.muchos_preal(pReals, exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_reales ::= E0 
            {
              LPReal RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.un_preal(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",26, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E0 ::= E1 ASIG E0 
            {
              Exp RESULT =null;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp op2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.asig(op1,op2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E0",17, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E1 ::= E1 op1 E2 
            {
              Exp RESULT =null;
		Exp opn1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opn2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop2(op, opn1,opn2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E1",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E1",18, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E2 ::= E2 SUMA E3 
            {
              Exp RESULT =null;
		Exp opn1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opn2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop2("+", opn1,opn2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E2 ::= E3 RESTA E3 
            {
              Exp RESULT =null;
		Exp opn1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opn2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop2("-", opn1,opn2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E2",19, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E3 ::= E4 AND E3 
            {
              Exp RESULT =null;
		Exp opn1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opn2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.and(opn1,opn2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E3 ::= E4 OR E4 
            {
              Exp RESULT =null;
		Exp opn1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		Exp opn2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.or(opn1,opn2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E3",20, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E4 ::= E4 op4 E5 
            {
              Exp RESULT =null;
		Exp opn1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opn2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop2(op, opn1,opn2); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E4",21, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E5 ::= op5 E5 
            {
              Exp RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		Exp opn1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = sem.mkop1(op, opn1); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E5",22, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E6 ::= E6 CORCHETEA E0 CORCHETEC 
            {
              Exp RESULT =null;
		Exp opn1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-3)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Exp)sem.accesoArray(opn1,exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E6 ::= E6 PUNTO IDENTIFICADOR 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.accesoCampo(exp, id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E6 ::= E6 CIRCUNFLEJO 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = (Exp)sem.accesoPuntero(exp); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E6",23, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= LITENTERO 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_lit_ent(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= LITREAL 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_lit_real(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= LITCADENA 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_lit_cadena(num.str()).ponFila(num.fila()).ponCol(num.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = (Exp)sem.exp_lit_BoolTrue(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = (Exp)sem.exp_lit_BoolFalse(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= IDENTIFICADOR 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.peek()).value;
		 RESULT = (Exp)sem.exp_iden(id.str()).ponFila(id.fila()).ponCol(id.col()); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = (Exp)sem.exp_null(); 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= PARA E0 PARC 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorASTTiny$stack.elementAt(CUP$ConstructorASTTiny$top-1)).value;
		 RESULT = exp; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("E7",24, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // op1 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // op1 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op1 ::= MAYORIGUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op1 ::= MENORIGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op1 ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op1 ::= DESIGUAL 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op1",27, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op4 ::= MUL 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op4 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op4 ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op4",28, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op5 ::= RESTA 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op5",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op5 ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$ConstructorASTTiny$result = parser.getSymbolFactory().newSymbol("op5",29, RESULT);
            }
          return CUP$ConstructorASTTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorASTTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorASTTiny$do_action(
    int                        CUP$ConstructorASTTiny$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorASTTiny$parser,
    java.util.Stack            CUP$ConstructorASTTiny$stack,
    int                        CUP$ConstructorASTTiny$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorASTTiny$do_action_part00000000(
                               CUP$ConstructorASTTiny$act_num,
                               CUP$ConstructorASTTiny$parser,
                               CUP$ConstructorASTTiny$stack,
                               CUP$ConstructorASTTiny$top);
    }
}

