// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: spec.jflex

package alex;


@SuppressWarnings("fallthrough")
public class AnalizadorLexicoTiny {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\2\0\1\1\22\0\1\3\1\4"+
    "\1\0\1\5\1\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\0\1\14\1\15\1\16\1\17\11\20"+
    "\1\0\1\21\1\22\1\23\1\24\1\0\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\2\37\1\40\1\37\1\41\1\42\1\43\1\37\1\44"+
    "\1\45\1\46\1\47\1\37\1\50\1\37\1\51\1\37"+
    "\1\52\1\0\1\53\1\0\1\54\1\0\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\2\66"+
    "\1\67\1\66\1\70\1\71\1\72\1\66\1\73\1\74"+
    "\1\75\1\76\1\66\1\77\1\66\1\100\1\66\1\101"+
    "\1\0\1\102\u019f\0\1\103\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\2\14\1\15\1\16"+
    "\1\17\1\20\1\21\16\1\1\22\1\23\17\1\1\24"+
    "\1\25\1\1\1\26\1\2\1\27\2\0\1\30\1\31"+
    "\1\32\6\0\1\33\2\0\1\34\2\0\1\35\16\0"+
    "\1\33\2\0\1\34\2\0\1\35\10\0\1\36\1\0"+
    "\3\37\1\40\5\0\1\41\1\42\1\43\10\0\1\44"+
    "\1\0\1\45\1\46\1\0\1\47\1\0\1\50\1\51"+
    "\1\52\1\53\2\0\1\54\1\55\4\0\1\56\2\0"+
    "\1\57\1\60\1\61\1\62\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\104\0\210\0\314\0\104\0\u0110\0\104"+
    "\0\104\0\104\0\u0154\0\u0154\0\104\0\104\0\u0198\0\u01dc"+
    "\0\104\0\u0220\0\u0264\0\u02a8\0\104\0\u02ec\0\u0330\0\u0374"+
    "\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594"+
    "\0\u05d8\0\u061c\0\u0660\0\104\0\104\0\u06a4\0\u06e8\0\u072c"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\104\0\104\0\u0aa0\0\104"+
    "\0\u0ae4\0\104\0\u0b28\0\u0b6c\0\104\0\104\0\104\0\u0bb0"+
    "\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0\0\u0d04\0\104\0\u0d48\0\u0d8c"+
    "\0\104\0\u0dd0\0\u0e14\0\104\0\u0e58\0\u0e9c\0\u0ee0\0\u0f24"+
    "\0\u0f68\0\u0fac\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144"+
    "\0\u1188\0\u11cc\0\u1034\0\u1210\0\u1254\0\u1034\0\u1298\0\u12dc"+
    "\0\u1034\0\u1320\0\u1364\0\u13a8\0\u13ec\0\u1430\0\u1474\0\u14b8"+
    "\0\u14fc\0\104\0\u1540\0\104\0\u1584\0\u15c8\0\104\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\104\0\104\0\104\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980"+
    "\0\u19c4\0\104\0\104\0\u1a08\0\104\0\u1a4c\0\104\0\104"+
    "\0\104\0\104\0\u1a90\0\u1ad4\0\104\0\104\0\u1b18\0\u1b5c"+
    "\0\u083c\0\u1ba0\0\104\0\u1be4\0\u1c28\0\104\0\104\0\104"+
    "\0\104\0\104";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\2\1\34\2\2\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\2\1\43\1\2\1\44\1\45"+
    "\1\2\1\46\1\47\1\50\1\51\1\52\1\53\2\54"+
    "\1\55\2\54\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\54\1\64\1\54\1\65\1\66\1\67\127\0\1\70"+
    "\65\0\1\71\105\0\1\72\113\0\1\17\1\20\66\0"+
    "\1\73\11\0\1\74\14\0\1\73\26\0\1\73\25\0"+
    "\1\73\11\0\1\74\1\0\2\20\11\0\1\73\26\0"+
    "\1\73\45\0\1\75\103\0\1\76\103\0\1\77\121\0"+
    "\1\100\26\0\1\100\55\0\1\101\26\0\1\101\40\0"+
    "\1\102\26\0\1\102\60\0\1\103\26\0\1\103\62\0"+
    "\1\104\26\0\1\104\42\0\1\105\26\0\1\105\61\0"+
    "\1\106\5\0\1\107\20\0\1\106\5\0\1\107\45\0"+
    "\1\110\5\0\1\111\1\0\1\112\4\0\1\113\11\0"+
    "\1\110\5\0\1\111\1\0\1\112\4\0\1\113\51\0"+
    "\1\114\26\0\1\114\54\0\1\115\26\0\1\115\42\0"+
    "\1\116\26\0\1\116\70\0\1\117\26\0\1\117\52\0"+
    "\1\120\4\0\1\121\21\0\1\120\4\0\1\121\40\0"+
    "\1\122\6\0\1\123\17\0\1\122\6\0\1\123\36\0"+
    "\13\124\1\125\10\124\16\0\1\100\41\0\14\124\1\126"+
    "\7\124\17\0\1\101\40\0\1\127\23\124\3\0\1\102"+
    "\54\0\4\124\1\130\17\124\7\0\1\103\50\0\12\124"+
    "\1\131\11\124\15\0\1\104\42\0\1\132\23\124\3\0"+
    "\1\105\54\0\24\124\60\0\5\124\1\133\5\124\1\134"+
    "\10\124\10\0\1\106\5\0\1\107\41\0\4\124\1\135"+
    "\5\124\1\136\1\124\1\137\4\124\1\140\2\124\7\0"+
    "\1\110\5\0\1\111\1\0\1\112\4\0\1\113\33\0"+
    "\16\124\1\141\5\124\21\0\1\114\36\0\16\124\1\142"+
    "\5\124\21\0\1\115\36\0\4\124\1\143\17\124\7\0"+
    "\1\116\50\0\20\124\1\144\3\124\23\0\1\117\34\0"+
    "\16\124\1\145\4\124\1\146\21\0\1\120\4\0\1\121"+
    "\31\0\7\124\1\147\6\124\1\150\5\124\12\0\1\122"+
    "\6\0\1\123\10\0\103\151\1\152\2\71\1\0\101\71"+
    "\3\0\1\153\7\0\2\153\2\0\1\154\1\155\102\0"+
    "\2\156\114\0\1\157\26\0\1\157\65\0\1\160\26\0"+
    "\1\160\52\0\1\161\26\0\1\161\54\0\1\162\26\0"+
    "\1\162\61\0\1\163\26\0\1\163\47\0\1\164\26\0"+
    "\1\164\62\0\1\165\26\0\1\165\56\0\1\166\26\0"+
    "\1\166\52\0\1\167\26\0\1\167\46\0\1\170\26\0"+
    "\1\170\56\0\1\171\26\0\1\171\40\0\1\172\26\0"+
    "\1\172\72\0\1\173\26\0\1\173\57\0\1\174\26\0"+
    "\1\174\50\0\1\175\26\0\1\175\47\0\1\176\26\0"+
    "\1\176\54\0\1\177\26\0\1\177\72\0\1\200\60\0"+
    "\1\157\22\0\1\200\3\0\1\157\65\0\1\160\11\0"+
    "\1\200\14\0\1\160\52\0\1\161\13\0\1\200\12\0"+
    "\1\161\54\0\1\162\13\0\1\200\12\0\1\162\61\0"+
    "\1\163\6\0\1\200\17\0\1\163\47\0\1\164\13\0"+
    "\1\200\12\0\1\164\62\0\1\165\5\0\1\200\20\0"+
    "\1\165\56\0\1\166\3\0\1\200\22\0\1\166\52\0"+
    "\1\167\5\0\1\200\20\0\1\167\46\0\1\170\13\0"+
    "\1\200\12\0\1\170\56\0\1\171\11\0\1\200\14\0"+
    "\1\171\40\0\1\172\25\0\1\200\1\172\72\0\1\173"+
    "\7\0\1\200\16\0\1\173\57\0\1\174\4\0\1\200"+
    "\21\0\1\174\50\0\1\175\10\0\1\200\15\0\1\175"+
    "\47\0\1\176\15\0\1\200\10\0\1\176\54\0\1\177"+
    "\15\0\1\200\10\0\1\177\121\0\1\152\17\0\1\154"+
    "\1\155\102\0\2\155\66\0\1\73\13\0\1\201\1\156"+
    "\11\0\1\73\26\0\1\73\62\0\1\202\26\0\1\202"+
    "\54\0\1\203\26\0\1\203\46\0\1\204\26\0\1\204"+
    "\54\0\1\205\26\0\1\205\67\0\1\206\26\0\1\206"+
    "\47\0\1\207\26\0\1\207\44\0\1\210\26\0\1\210"+
    "\55\0\1\211\6\0\1\212\17\0\1\211\6\0\1\212"+
    "\52\0\1\213\10\0\1\214\15\0\1\213\10\0\1\214"+
    "\37\0\1\215\26\0\1\215\54\0\1\216\26\0\1\216"+
    "\62\0\1\217\26\0\1\217\62\0\1\220\26\0\1\220"+
    "\25\0\2\200\34\0\24\221\22\0\1\201\1\156\131\0"+
    "\1\222\26\0\1\222\40\0\1\223\26\0\1\223\63\0"+
    "\1\224\26\0\1\224\43\0\1\225\26\0\1\225\56\0"+
    "\1\226\26\0\1\226\54\0\1\227\26\0\1\227\54\0"+
    "\1\230\26\0\1\230\56\0\1\231\26\0\1\231\66\0"+
    "\1\232\26\0\1\232\6\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7276];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\1\3\11\2\1\2\11"+
    "\2\1\1\11\3\1\1\11\16\1\2\11\17\1\2\11"+
    "\1\1\1\11\1\1\1\11\2\0\3\11\6\0\1\11"+
    "\2\0\1\11\2\0\1\11\16\0\1\1\2\0\1\1"+
    "\2\0\1\1\10\0\1\11\1\0\1\11\2\1\1\11"+
    "\5\0\3\11\10\0\1\1\1\0\2\11\1\0\1\11"+
    "\1\0\4\11\2\0\2\11\4\0\1\11\2\0\5\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  private ALexOperations ops;
  public String lexema() {return yytext();}
  public int fila() {return yyline+1;}
  public int columna() {return yycolumn+1;}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoTiny(java.io.Reader in) {
    ops = new ALexOperations(this);
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public UnidadLexica yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          {   return ops.unidadEof();
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { ops.error();
            }
          // fall through
          case 52: break;
          case 2:
            { 
            }
          // fall through
          case 53: break;
          case 3:
            { return ops.unidadMod();
            }
          // fall through
          case 54: break;
          case 4:
            { return ops.unidadAmpersand();
            }
          // fall through
          case 55: break;
          case 5:
            { return ops.unidadParA();
            }
          // fall through
          case 56: break;
          case 6:
            { return ops.unidadParC();
            }
          // fall through
          case 57: break;
          case 7:
            { return ops.unidadMul();
            }
          // fall through
          case 58: break;
          case 8:
            { return ops.unidadSuma();
            }
          // fall through
          case 59: break;
          case 9:
            { return ops.unidadResta();
            }
          // fall through
          case 60: break;
          case 10:
            { return ops.unidadPunto();
            }
          // fall through
          case 61: break;
          case 11:
            { return ops.unidadDiv();
            }
          // fall through
          case 62: break;
          case 12:
            { return ops.unidadEnt();
            }
          // fall through
          case 63: break;
          case 13:
            { return ops.unidadPuntoYComa();
            }
          // fall through
          case 64: break;
          case 14:
            { return ops.unidadMenor();
            }
          // fall through
          case 65: break;
          case 15:
            { return ops.unidadAsig();
            }
          // fall through
          case 66: break;
          case 16:
            { return ops.unidadMayor();
            }
          // fall through
          case 67: break;
          case 17:
            { return ops.unidadArroba();
            }
          // fall through
          case 68: break;
          case 18:
            { return ops.unidadCorcheteA();
            }
          // fall through
          case 69: break;
          case 19:
            { return ops.unidadCorcheteC();
            }
          // fall through
          case 70: break;
          case 20:
            { return ops.unidadLlaveA();
            }
          // fall through
          case 71: break;
          case 21:
            { return ops.unidadLlaveC();
            }
          // fall through
          case 72: break;
          case 22:
            { return ops.unidadDesigual();
            }
          // fall through
          case 73: break;
          case 23:
            { return ops.unidadAmpersand2();
            }
          // fall through
          case 74: break;
          case 24:
            { return ops.unidadMenorIgual();
            }
          // fall through
          case 75: break;
          case 25:
            { return ops.unidadIgual();
            }
          // fall through
          case 76: break;
          case 26:
            { return ops.unidadMayorIgual();
            }
          // fall through
          case 77: break;
          case 27:
            { return ops.unidadIf();
            }
          // fall through
          case 78: break;
          case 28:
            { return ops.unidadNl();
            }
          // fall through
          case 79: break;
          case 29:
            { return ops.unidadOr();
            }
          // fall through
          case 80: break;
          case 30:
            { return ops.unidadCadena();
            }
          // fall through
          case 81: break;
          case 31:
            { return ops.unidadLitReal();
            }
          // fall through
          case 82: break;
          case 32:
            { return ops.unidadAnd();
            }
          // fall through
          case 83: break;
          case 33:
            { return ops.unidadInt();
            }
          // fall through
          case 84: break;
          case 34:
            { return ops.unidadNew();
            }
          // fall through
          case 85: break;
          case 35:
            { return ops.unidadNot();
            }
          // fall through
          case 86: break;
          case 36:
            { return ops.unidadId();
            }
          // fall through
          case 87: break;
          case 37:
            { return ops.unidadBool();
            }
          // fall through
          case 88: break;
          case 38:
            { return ops.unidadCall();
            }
          // fall through
          case 89: break;
          case 39:
            { return ops.unidadElse();
            }
          // fall through
          case 90: break;
          case 40:
            { return ops.unidadNull();
            }
          // fall through
          case 91: break;
          case 41:
            { return ops.unidadProc();
            }
          // fall through
          case 92: break;
          case 42:
            { return ops.unidadRead();
            }
          // fall through
          case 93: break;
          case 43:
            { return ops.unidadReal();
            }
          // fall through
          case 94: break;
          case 44:
            { return ops.unidadTrue();
            }
          // fall through
          case 95: break;
          case 45:
            { return ops.unidadType();
            }
          // fall through
          case 96: break;
          case 46:
            { return ops.unidadFalse();
            }
          // fall through
          case 97: break;
          case 47:
            { return ops.unidadWhile();
            }
          // fall through
          case 98: break;
          case 48:
            { return ops.unidadWrite();
            }
          // fall through
          case 99: break;
          case 49:
            { return ops.unidadDelete();
            }
          // fall through
          case 100: break;
          case 50:
            { return ops.unidadString();
            }
          // fall through
          case 101: break;
          case 51:
            { return ops.unidadStruct();
            }
          // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
