/* Generated By:JavaCC: Do not edit this line. ConstructorASTsTinyConstants.java */
package c_ast_descendente;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ConstructorASTsTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int parteEntera = 4;
  /** RegularExpression Id. */
  int parteDecimal = 5;
  /** RegularExpression Id. */
  int parteExponencial = 6;
  /** RegularExpression Id. */
  int int_ = 7;
  /** RegularExpression Id. */
  int real = 8;
  /** RegularExpression Id. */
  int bool = 9;
  /** RegularExpression Id. */
  int string = 10;
  /** RegularExpression Id. */
  int null_ = 11;
  /** RegularExpression Id. */
  int proc = 12;
  /** RegularExpression Id. */
  int if_ = 13;
  /** RegularExpression Id. */
  int else_ = 14;
  /** RegularExpression Id. */
  int while_ = 15;
  /** RegularExpression Id. */
  int struct = 16;
  /** RegularExpression Id. */
  int new_ = 17;
  /** RegularExpression Id. */
  int delete = 18;
  /** RegularExpression Id. */
  int read = 19;
  /** RegularExpression Id. */
  int write = 20;
  /** RegularExpression Id. */
  int nl = 21;
  /** RegularExpression Id. */
  int type = 22;
  /** RegularExpression Id. */
  int call = 23;
  /** RegularExpression Id. */
  int true_ = 24;
  /** RegularExpression Id. */
  int false_ = 25;
  /** RegularExpression Id. */
  int and = 26;
  /** RegularExpression Id. */
  int not = 27;
  /** RegularExpression Id. */
  int or = 28;
  /** RegularExpression Id. */
  int identificador = 29;
  /** RegularExpression Id. */
  int literalEntero = 30;
  /** RegularExpression Id. */
  int literalReal = 31;
  /** RegularExpression Id. */
  int literalCadena = 32;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<parteEntera>",
    "<parteDecimal>",
    "<parteExponencial>",
    "<int_>",
    "<real>",
    "<bool>",
    "<string>",
    "<null_>",
    "<proc>",
    "<if_>",
    "<else_>",
    "<while_>",
    "<struct>",
    "<new_>",
    "<delete>",
    "<read>",
    "<write>",
    "<nl>",
    "<type>",
    "<call>",
    "<true_>",
    "<false_>",
    "<and>",
    "<not>",
    "<or>",
    "<identificador>",
    "<literalEntero>",
    "<literalReal>",
    "<literalCadena>",
    "<token of kind 33>",
    "<token of kind 34>",
    "\" { \"",
    "\" }\"",
    "\"&&\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"&\"",
    "\"[\"",
    "\"]\"",
    "\"^\"",
    "\"{\"",
    "\"}\"",
    "\"@\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\".\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"not\"",
  };

}
