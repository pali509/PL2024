
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Mar 05 14:52:25 CET 2024
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Mar 05 14:52:25 CET 2024
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\003\000\002\002\004\000\002\003" +
    "\006\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\002\000\002\006\005\000\002\006\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\011\004\000\002\012\005\000\002\013\010\000\002\015" +
    "\003\000\002\015\002\000\002\016\005\000\002\016\003" +
    "\000\002\017\005\000\002\020\003\000\002\020\002\000" +
    "\002\014\006\000\002\014\003\000\002\021\004\000\002" +
    "\021\003\000\002\022\003\000\002\022\006\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\005\000\002\023\003\000\002\024\004\000" +
    "\002\007\005\000\002\007\003\000\002\025\006\000\002" +
    "\026\004\000\002\026\002\000\002\025\004\000\002\025" +
    "\005\000\002\025\004\000\002\025\004\000\002\025\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\007\000" +
    "\002\025\003\000\002\030\003\000\002\030\002\000\002" +
    "\031\005\000\002\031\003\000\002\027\004\000\002\032" +
    "\004\000\002\032\002\000\002\033\005\000\002\033\003" +
    "\000\002\034\005\000\002\034\005\000\002\034\003\000" +
    "\002\035\005\000\002\035\005\000\002\035\003\000\002" +
    "\036\005\000\002\036\003\000\002\037\004\000\002\037" +
    "\003\000\002\040\004\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\005\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\044\005\000\002\044\004\000\002" +
    "\044\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\004\034\005\001\002\000\004\002\217\001" +
    "\002\000\052\004\022\030\017\034\ufffd\035\ufffd\036\ufffd" +
    "\041\011\042\025\043\023\044\016\046\020\047\ufffd\051" +
    "\ufffd\052\007\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd" +
    "\060\015\061\ufffd\001\002\000\004\002\001\001\002\000" +
    "\004\034\207\001\002\000\006\004\206\032\173\001\002" +
    "\000\010\004\uffe5\032\uffe5\037\uffe5\001\002\000\006\026" +
    "\ufff7\040\ufff7\001\002\000\006\026\ufff6\040\ufff6\001\002" +
    "\000\006\026\204\040\ufff9\001\002\000\020\004\022\030" +
    "\017\041\011\042\025\043\023\044\016\052\007\001\002" +
    "\000\010\004\uffe2\032\uffe2\037\uffe2\001\002\000\020\004" +
    "\022\030\017\041\011\042\025\043\023\044\016\052\007" +
    "\001\002\000\004\004\161\001\002\000\030\034\005\035" +
    "\ufffb\036\044\047\042\051\033\053\034\054\043\055\032" +
    "\056\045\057\041\061\046\001\002\000\010\004\uffe7\032" +
    "\uffe7\037\uffe7\001\002\000\010\004\uffe3\032\uffe3\037\uffe3" +
    "\001\002\000\006\026\ufff8\040\ufff8\001\002\000\010\004" +
    "\uffe4\032\uffe4\037\uffe4\001\002\000\004\040\031\001\002" +
    "\000\010\004\uffe8\032\uffe8\037\uffe8\001\002\000\010\004" +
    "\uffea\032\uffea\037\uffea\001\002\000\030\034\ufffe\035\ufffe" +
    "\036\ufffe\047\ufffe\051\ufffe\053\ufffe\054\ufffe\055\ufffe\056" +
    "\ufffe\057\ufffe\061\ufffe\001\002\000\026\004\071\005\073" +
    "\006\063\007\051\011\074\024\057\045\072\062\054\063" +
    "\067\065\052\001\002\000\026\004\071\005\073\006\063" +
    "\007\051\011\074\024\057\045\072\062\054\063\067\065" +
    "\052\001\002\000\026\004\071\005\073\006\063\007\051" +
    "\011\074\024\057\045\072\062\054\063\067\065\052\001" +
    "\002\000\006\026\uffd1\035\uffd1\001\002\000\004\035\154" +
    "\001\002\000\006\026\152\035\ufffc\001\002\000\006\026" +
    "\uffdd\035\uffdd\001\002\000\006\026\uffd5\035\uffd5\001\002" +
    "\000\026\004\071\005\073\006\063\007\051\011\074\024" +
    "\057\045\072\062\054\063\067\065\052\001\002\000\026" +
    "\004\071\005\073\006\063\007\051\011\074\024\057\045" +
    "\072\062\054\063\067\065\052\001\002\000\026\004\071" +
    "\005\073\006\063\007\051\011\074\024\057\045\072\062" +
    "\054\063\067\065\052\001\002\000\026\004\071\005\073" +
    "\006\063\007\051\011\074\024\057\045\072\062\054\063" +
    "\067\065\052\001\002\000\004\004\047\001\002\000\004" +
    "\024\050\001\002\000\030\004\071\005\073\006\063\007" +
    "\051\011\074\024\057\025\uffcf\045\072\062\054\063\067" +
    "\065\052\001\002\000\060\010\uffba\011\uffba\012\uffba\013" +
    "\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba" +
    "\022\uffba\023\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\064\uffba\066\uffba" +
    "\001\002\000\026\004\uffaa\005\uffaa\006\uffaa\007\uffaa\011" +
    "\uffaa\024\uffaa\045\uffaa\062\uffaa\063\uffaa\065\uffaa\001\002" +
    "\000\060\010\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\136\031\134\032\135\033" +
    "\uffbe\034\uffbe\035\uffbe\064\uffbe\066\uffbe\001\002\000\060" +
    "\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\064\uffb9\066\uffb9\001\002\000\052\010\uffc0" +
    "\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017" +
    "\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\033\uffc0\034\uffc0\035\uffc0\064\uffc0\066\uffc0\001" +
    "\002\000\052\010\uffc2\011\uffc2\012\125\013\126\014\122" +
    "\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\064\124\066\127\001\002\000\026\004\071\005\073\006" +
    "\063\007\051\011\074\024\057\045\072\062\054\063\067" +
    "\065\052\001\002\000\026\004\071\005\073\006\063\007" +
    "\051\011\074\024\057\045\072\062\054\063\067\065\052" +
    "\001\002\000\040\010\uffc5\011\115\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\033\uffc5\034\uffc5\035\uffc5\001\002\000\036\010" +
    "\113\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\025\uffc8\026\uffc8\027\uffc8\033\uffc8\034\uffc8\035" +
    "\uffc8\001\002\000\060\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\064\uffbb\066\uffbb\001" +
    "\002\000\034\015\106\016\102\017\104\020\101\021\107" +
    "\022\103\023\105\025\uffca\026\uffca\027\uffca\033\uffca\034" +
    "\uffca\035\uffca\001\002\000\006\025\uffcd\027\uffcd\001\002" +
    "\000\004\025\077\001\002\000\060\010\uffb8\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\064\uffb8" +
    "\066\uffb8\001\002\000\006\025\uffd0\027\075\001\002\000" +
    "\060\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\064\uffb7\066\uffb7\001\002\000\060\010" +
    "\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6" +
    "\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\064\uffb6\066\uffb6\001\002\000\060\010\uffbc\011" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\025\uffbc\026\uffbc\027" +
    "\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc" +
    "\064\uffbc\066\uffbc\001\002\000\026\004\uffab\005\uffab\006" +
    "\uffab\007\uffab\011\uffab\024\uffab\045\uffab\062\uffab\063\uffab" +
    "\065\uffab\001\002\000\026\004\071\005\073\006\063\007" +
    "\051\011\074\024\057\045\072\062\054\063\067\065\052" +
    "\001\002\000\006\025\uffce\027\uffce\001\002\000\006\026" +
    "\uffd2\035\uffd2\001\002\000\026\004\071\005\073\006\063" +
    "\007\051\011\074\024\057\045\072\062\054\063\067\065" +
    "\052\001\002\000\026\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\011\uffb1\024\uffb1\045\uffb1\062\uffb1\063\uffb1\065\uffb1\001" +
    "\002\000\026\004\uffb3\005\uffb3\006\uffb3\007\uffb3\011\uffb3" +
    "\024\uffb3\045\uffb3\062\uffb3\063\uffb3\065\uffb3\001\002\000" +
    "\026\004\uffaf\005\uffaf\006\uffaf\007\uffaf\011\uffaf\024\uffaf" +
    "\045\uffaf\062\uffaf\063\uffaf\065\uffaf\001\002\000\026\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\011\uffb2\024\uffb2\045\uffb2" +
    "\062\uffb2\063\uffb2\065\uffb2\001\002\000\026\004\071\005" +
    "\073\006\063\007\051\011\074\024\057\045\072\062\054" +
    "\063\067\065\052\001\002\000\026\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\011\uffb4\024\uffb4\045\uffb4\062\uffb4\063\uffb4" +
    "\065\uffb4\001\002\000\026\004\uffb0\005\uffb0\006\uffb0\007" +
    "\uffb0\011\uffb0\024\uffb0\045\uffb0\062\uffb0\063\uffb0\065\uffb0" +
    "\001\002\000\016\025\uffcc\026\uffcc\027\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\001\002\000\016\025\uffcb\026\uffcb\027\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\001\002\000\036\010\113\015" +
    "\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\033\uffc9\034\uffc9\035\uffc9\001" +
    "\002\000\026\004\071\005\073\006\063\007\051\011\074" +
    "\024\057\045\072\062\054\063\067\065\052\001\002\000" +
    "\036\010\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7" +
    "\022\uffc7\023\uffc7\025\uffc7\026\uffc7\027\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\001\002\000\026\004\071\005\073\006\063" +
    "\007\051\011\074\024\057\045\072\062\054\063\067\065" +
    "\052\001\002\000\036\010\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\001\002\000\052\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\033\uffbf\034\uffbf\035\uffbf\064\uffbf\066\uffbf\001" +
    "\002\000\004\025\121\001\002\000\060\010\uffb5\011\uffb5" +
    "\012\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\064" +
    "\uffb5\066\uffb5\001\002\000\026\004\uffac\005\uffac\006\uffac" +
    "\007\uffac\011\uffac\024\uffac\045\uffac\062\uffac\063\uffac\065" +
    "\uffac\001\002\000\026\004\071\005\073\006\063\007\051" +
    "\011\074\024\057\045\072\062\054\063\067\065\052\001" +
    "\002\000\026\004\071\005\073\006\063\007\051\011\074" +
    "\024\057\045\072\062\054\063\067\065\052\001\002\000" +
    "\026\004\uffae\005\uffae\006\uffae\007\uffae\011\uffae\024\uffae" +
    "\045\uffae\062\uffae\063\uffae\065\uffae\001\002\000\026\004" +
    "\uffad\005\uffad\006\uffad\007\uffad\011\uffad\024\uffad\045\uffad" +
    "\062\uffad\063\uffad\065\uffad\001\002\000\026\004\071\005" +
    "\073\006\063\007\051\011\074\024\057\045\072\062\054" +
    "\063\067\065\052\001\002\000\046\010\uffc3\011\uffc3\012" +
    "\125\013\126\014\122\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\025\uffc3\026\uffc3\027\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\001\002\000\040\010\uffc4\011\uffc4" +
    "\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\025\uffc4\026\uffc4\027\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\001\002\000\052\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\025\uffc1\026\uffc1\027\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\064\uffc1\066\uffc1\001\002\000\060\010\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\021\uffbd\022\uffbd\023\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\064" +
    "\uffbd\066\uffbd\001\002\000\004\004\141\001\002\000\026" +
    "\004\071\005\073\006\063\007\051\011\074\024\057\045" +
    "\072\062\054\063\067\065\052\001\002\000\060\010\uffa7" +
    "\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\064\uffa7\066\uffa7\001\002\000\004\033\140\001\002" +
    "\000\060\010\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9" +
    "\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\034\uffa9\035\uffa9\064\uffa9\066\uffa9\001\002\000\060" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034" +
    "\uffa8\035\uffa8\064\uffa8\066\uffa8\001\002\000\006\026\uffd6" +
    "\035\uffd6\001\002\000\006\026\uffd9\035\uffd9\001\002\000" +
    "\006\026\uffd3\035\uffd3\001\002\000\004\034\005\001\002" +
    "\000\010\026\uffda\035\uffda\050\147\001\002\000\004\034" +
    "\005\001\002\000\006\026\uffdc\035\uffdc\001\002\000\006" +
    "\026\uffdb\035\uffdb\001\002\000\026\034\005\036\044\047" +
    "\042\051\033\053\034\054\043\055\032\056\045\057\041" +
    "\061\046\001\002\000\006\026\uffde\035\uffde\001\002\000" +
    "\014\002\uffff\026\uffff\035\uffff\040\uffff\050\uffff\001\002" +
    "\000\006\026\uffd4\035\uffd4\001\002\000\004\034\005\001" +
    "\002\000\006\026\uffd8\035\uffd8\001\002\000\006\026\uffd7" +
    "\035\uffd7\001\002\000\004\024\162\001\002\000\022\004" +
    "\022\025\ufff1\030\017\041\011\042\025\043\023\044\016" +
    "\052\007\001\002\000\006\025\uffef\027\uffef\001\002\000" +
    "\006\025\ufff2\027\177\001\002\000\010\004\uffec\032\173" +
    "\037\171\001\002\000\004\025\167\001\002\000\004\034" +
    "\005\001\002\000\006\026\ufff3\040\ufff3\001\002\000\004" +
    "\004\uffed\001\002\000\004\004\176\001\002\000\004\005" +
    "\174\001\002\000\004\033\175\001\002\000\010\004\uffeb" +
    "\032\uffeb\037\uffeb\001\002\000\006\025\uffee\027\uffee\001" +
    "\002\000\020\004\022\030\017\041\011\042\025\043\023" +
    "\044\016\052\007\001\002\000\006\025\ufff0\027\ufff0\001" +
    "\002\000\010\004\uffe9\032\uffe9\037\uffe9\001\002\000\006" +
    "\004\203\032\173\001\002\000\006\026\ufff4\040\ufff4\001" +
    "\002\000\024\004\022\030\017\041\011\042\025\043\023" +
    "\044\016\046\020\052\007\060\015\001\002\000\004\040" +
    "\ufffa\001\002\000\006\026\ufff5\040\ufff5\001\002\000\020" +
    "\004\022\030\017\041\011\042\025\043\023\044\016\052" +
    "\007\001\002\000\006\027\214\035\215\001\002\000\006" +
    "\004\213\032\173\001\002\000\006\027\uffe0\035\uffe0\001" +
    "\002\000\006\027\uffdf\035\uffdf\001\002\000\020\004\022" +
    "\030\017\041\011\042\025\043\023\044\016\052\007\001" +
    "\002\000\010\004\uffe6\032\uffe6\037\uffe6\001\002\000\006" +
    "\027\uffe1\035\uffe1\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\006\002\003\003\005\001\001\000\002\001" +
    "\001\000\024\004\020\006\025\010\013\011\023\012\011" +
    "\013\012\014\007\021\027\022\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\014\201\021\027\022\026\001\001\000\002\001\001" +
    "\000\006\021\200\022\026\001\001\000\002\001\001\000" +
    "\012\003\034\005\035\007\036\025\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\027\157\033\063\034\061\035" +
    "\060\036\055\037\054\040\052\043\057\001\001\000\022" +
    "\027\155\033\063\034\061\035\060\036\055\037\054\040" +
    "\052\043\057\001\001\000\022\027\154\033\063\034\061" +
    "\035\060\036\055\037\054\040\052\043\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\027\144\033\063\034" +
    "\061\035\060\036\055\037\054\040\052\043\057\001\001" +
    "\000\022\027\143\033\063\034\061\035\060\036\055\037" +
    "\054\040\052\043\057\001\001\000\022\027\142\033\063" +
    "\034\061\035\060\036\055\037\054\040\052\043\057\001" +
    "\001\000\022\027\141\033\063\034\061\035\060\036\055" +
    "\037\054\040\052\043\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\027\064\030\065\031\067\033\063" +
    "\034\061\035\060\036\055\037\054\040\052\043\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\122\001\001\000\022\027\117\033\063\034\061\035\060" +
    "\036\055\037\054\040\052\043\057\001\001\000\010\037" +
    "\116\040\052\043\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\032\107\041\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\027\075\033\063" +
    "\034\061\035\060\036\055\037\054\040\052\043\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\034\111" +
    "\035\060\036\055\037\054\040\052\043\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\027\110\033\063\034\061\035\060\036" +
    "\055\037\054\040\052\043\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\035\113\036\055\037\054\040\052" +
    "\043\057\001\001\000\002\001\001\000\014\035\115\036" +
    "\055\037\054\040\052\043\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\037\131\040\052\043\057\001\001" +
    "\000\014\035\130\036\055\037\054\040\052\043\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\036\127" +
    "\037\054\040\052\043\057\001\001\000\004\042\122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\027\136\033\063\034\061\035" +
    "\060\036\055\037\054\040\052\043\057\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\145\001\001\000\004\026\147\001\001\000" +
    "\004\003\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\034\025\152\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\014\164\015\165\016\163\017\162\021\027\022\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\171\001\001\000\002\001\001\000\004\003\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\014\164\017\177\021\027\022\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\006\204\010\013\011\023\012" +
    "\011\013\012\014\007\021\027\022\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\014\210\021\027\022" +
    "\026\023\207\024\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\210\021\027\022\026\024\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 
  return getScanner().next_token(); 

    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica)unidadLexica);
      }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloque ::= LLAVEA declaraciones_opt instrucciones_opt LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("bloque",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaraciones_opt ::= declaraciones AMPERSAND2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones_opt",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones_opt ::= instrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones_opt",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= declaracion PUNTOYCOMA declaraciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaraciones",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= declaracion_var 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= declaracion_tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= declaracion_proc 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion_var ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion_var",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion_tipo ::= TYPE tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion_tipo",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion_proc ::= PROC IDENTIFICADOR PARA parametros_formales_opt PARC bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("declaracion_proc",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_formales_opt ::= parametros_formales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales_opt",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_formales_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales_opt",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parametros_formales ::= parametros_formales COMA parametro_formal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // parametros_formales ::= parametro_formal 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_formales",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // parametro_formal ::= tipo and_opt IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametro_formal",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // and_opt ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("and_opt",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // and_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("and_opt",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= tipo CORCHETEA LITENTERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo1 ::= CIRCUNFLEJO tipo1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo1 ::= tipo2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo1",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo2 ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo2 ::= STRUCT LLAVEA campos LLAVEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo2 ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo2 ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipo2 ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipo2 ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("tipo2",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // campos ::= campos COMA campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // campos ::= campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campos",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // campo ::= tipo IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("campo",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // instrucciones ::= instrucciones PUNTOYCOMA instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instrucciones",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccion ::= IF E0 bloque if_select 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if_select ::= ELSE bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("if_select",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if_select ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("if_select",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instruccion ::= ARROBA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instruccion ::= WHILE E0 bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instruccion ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccion ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccion ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccion ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccion ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instruccion ::= CALL IDENTIFICADOR PARA parametros_reales_opt PARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccion ::= bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("instruccion",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_reales_opt ::= parametros_reales 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales_opt",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_reales_opt ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales_opt",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_reales ::= parametros_reales COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // parametros_reales ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("parametros_reales",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 RE0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RE0 ::= ASIG E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RE0 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RE0",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E1 op1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E2 SUMA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E2 ::= E3 RESTA E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E3 ::= E4 AND E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E3 ::= E4 OR E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E4 ::= E4 op4 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E5 ::= op5 E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E6 ::= E6 op6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E6 ::= LITENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E6 ::= LITEREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E6 ::= LITCADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E6 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E6 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E6 ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E6 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E6 ::= PARA E0 PARC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op1 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op1 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op1 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op1 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op1 ::= IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op1 ::= DESIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op1",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op4 ::= MUL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op4 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op4 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op4",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op5 ::= RESTA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op5 ::= NOT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op5",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op6 ::= CORCHETEA E0 CORCHETEC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op6",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op6 ::= PUNTO IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op6",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op6 ::= CIRCUNFLEJO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("op6",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

